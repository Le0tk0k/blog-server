// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "github.com/Le0tk0k/blog-server/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostRepository is a mock of PostRepository interface
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// StorePost mocks base method
func (m *MockPostRepository) StorePost(post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePost indicates an expected call of StorePost
func (mr *MockPostRepositoryMockRecorder) StorePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePost", reflect.TypeOf((*MockPostRepository)(nil).StorePost), post)
}

// FindPostByID mocks base method
func (m *MockPostRepository) FindPostByID(id string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostByID", id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostByID indicates an expected call of FindPostByID
func (mr *MockPostRepositoryMockRecorder) FindPostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostByID", reflect.TypeOf((*MockPostRepository)(nil).FindPostByID), id)
}

// FindPostBySlug mocks base method
func (m *MockPostRepository) FindPostBySlug(slug string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostBySlug", slug)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostBySlug indicates an expected call of FindPostBySlug
func (mr *MockPostRepositoryMockRecorder) FindPostBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostBySlug", reflect.TypeOf((*MockPostRepository)(nil).FindPostBySlug), slug)
}

// FindAllPosts mocks base method
func (m *MockPostRepository) FindAllPosts(conditions []string) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPosts", conditions)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPosts indicates an expected call of FindAllPosts
func (mr *MockPostRepositoryMockRecorder) FindAllPosts(conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPosts", reflect.TypeOf((*MockPostRepository)(nil).FindAllPosts), conditions)
}

// UpdatePost mocks base method
func (m *MockPostRepository) UpdatePost(post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockPostRepositoryMockRecorder) UpdatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostRepository)(nil).UpdatePost), post)
}

// DeletePostByID mocks base method
func (m *MockPostRepository) DeletePostByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostByID indicates an expected call of DeletePostByID
func (mr *MockPostRepositoryMockRecorder) DeletePostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostByID", reflect.TypeOf((*MockPostRepository)(nil).DeletePostByID), id)
}
